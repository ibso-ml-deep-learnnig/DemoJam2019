# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import createAsset_pb2 as createAsset__pb2


class s4apiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.create = channel.unary_unary(
        '/asset.s4api/create',
        request_serializer=createAsset__pb2.assetInputs.SerializeToString,
        response_deserializer=createAsset__pb2.log.FromString,
        )
    self.display = channel.unary_unary(
        '/asset.s4api/display',
        request_serializer=createAsset__pb2.assetNumber.SerializeToString,
        response_deserializer=createAsset__pb2.assetResponse.FromString,
        )


class s4apiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def create(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def display(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_s4apiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'create': grpc.unary_unary_rpc_method_handler(
          servicer.create,
          request_deserializer=createAsset__pb2.assetInputs.FromString,
          response_serializer=createAsset__pb2.log.SerializeToString,
      ),
      'display': grpc.unary_unary_rpc_method_handler(
          servicer.display,
          request_deserializer=createAsset__pb2.assetNumber.FromString,
          response_serializer=createAsset__pb2.assetResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'asset.s4api', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DBServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.insertAsset = channel.unary_unary(
        '/asset.DBService/insertAsset',
        request_serializer=createAsset__pb2.NewAssetRequest.SerializeToString,
        response_deserializer=createAsset__pb2.NewAssetResponse.FromString,
        )
    self.selectAssetById = channel.unary_unary(
        '/asset.DBService/selectAssetById',
        request_serializer=createAsset__pb2.AssetId.SerializeToString,
        response_deserializer=createAsset__pb2.Asset.FromString,
        )


class DBServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def insertAsset(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def selectAssetById(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DBServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'insertAsset': grpc.unary_unary_rpc_method_handler(
          servicer.insertAsset,
          request_deserializer=createAsset__pb2.NewAssetRequest.FromString,
          response_serializer=createAsset__pb2.NewAssetResponse.SerializeToString,
      ),
      'selectAssetById': grpc.unary_unary_rpc_method_handler(
          servicer.selectAssetById,
          request_deserializer=createAsset__pb2.AssetId.FromString,
          response_serializer=createAsset__pb2.Asset.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'asset.DBService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
